{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SocialTranslator Documentation # API to allow people and apps to speak with his contacts through different Social Networks. Even if they don't know how to use them. Currently support Telegram, Gmail and Skype. The project consist of two different APIs, Community and Translator . Both are focused on send messages to different social networks but applying different business logic. Requirements # Python 3 pip Other requirements in file \"requirements.txt\" (must be installed with pip) Building # Having python 3 and pip installed. Follow the next steps. pip install -r requirements.txt python manage.py migrate python manage.py loaddata initial-data.json python manage.py createsuperuser The python manage.py createsuperuser is an optional command that could be useful if the database don't have already set a superuser. Running # ENV is optional ('develop' by default) and should be replaced according to your configuration. It could be 'production' or 'develop'. sh start.sh ENV Limitations # Just allows to use Telegram, Skype and Gmail. The login protocols accepted are basic user-password and oauth2. Can send just text, image, audio and video files.","title":"Home"},{"location":"#socialtranslator-documentation","text":"API to allow people and apps to speak with his contacts through different Social Networks. Even if they don't know how to use them. Currently support Telegram, Gmail and Skype. The project consist of two different APIs, Community and Translator . Both are focused on send messages to different social networks but applying different business logic.","title":"SocialTranslator Documentation"},{"location":"#requirements","text":"Python 3 pip Other requirements in file \"requirements.txt\" (must be installed with pip)","title":"Requirements"},{"location":"#building","text":"Having python 3 and pip installed. Follow the next steps. pip install -r requirements.txt python manage.py migrate python manage.py loaddata initial-data.json python manage.py createsuperuser The python manage.py createsuperuser is an optional command that could be useful if the database don't have already set a superuser.","title":"Building"},{"location":"#running","text":"ENV is optional ('develop' by default) and should be replaced according to your configuration. It could be 'production' or 'develop'. sh start.sh ENV","title":"Running"},{"location":"#limitations","text":"Just allows to use Telegram, Skype and Gmail. The login protocols accepted are basic user-password and oauth2. Can send just text, image, audio and video files.","title":"Limitations"},{"location":"about/","text":"Developers # Developed by Felipe Rodr\u00edguez @farodrig . Contributions # Contributions can be made through pull requests in the github project. If you want to add a new Social Network to the system read the guide \"How to add a new Translator\" Licenses # Themes used under license from the ReadTheDocs projects. ReadTheDocs theme - View license. Many thanks to the authors and contributors of those wonderful projects.","title":"About"},{"location":"about/#developers","text":"Developed by Felipe Rodr\u00edguez @farodrig .","title":"Developers"},{"location":"about/#contributions","text":"Contributions can be made through pull requests in the github project. If you want to add a new Social Network to the system read the guide \"How to add a new Translator\"","title":"Contributions"},{"location":"about/#licenses","text":"Themes used under license from the ReadTheDocs projects. ReadTheDocs theme - View license. Many thanks to the authors and contributors of those wonderful projects.","title":"Licenses"},{"location":"api/community/","text":"Community API # This API is oriented for older adults apps, in order to allow old people to communicate with his communities without needing to know how to use each one of the social networks. To be able to use any of these endpoints you need first have a valid token provided by the authentication endpoints (either JWT or OAuth2 ) The documentation for this API and his endpoints can be found here . Endpoints # /community/configure/ # Allow to configure a Social Network Translator for a specific user. Method: POST Request Type: JSON Request example: { \"user\": \"string\", \"social\": \"string\", \"auth_code\": \"string OPTIONAL\" } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", \"redirectURL\": \"URL_TO_REDIRECT_USER OPTIONAL\" } /community/sendMessage/ # Method: POST Request Type: JSON Request example: { \"fromUser\": \"string\", \"toUser\": \"string\", \"content\": \"string TEXT_MESSAGE\" \"file\": FILE_MESSAGE } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", } /community/check/networks/ # Allow to check the social network status for a specific user. Method: POST Request Type: JSON Request example: { \"user\": \"string\" } Response Type: JSON Response example: { \"string SOCIAL_ID\": { \"detail\": \"string TEXT_MESSAGE\", \"code\": 200 | 404 }, ... } /community/check/messages/ # Allow to check for new messages to a specific user. Method: POST Request Type: JSON Request example: { \"user\": \"string\" } Response Type: JSON Response example: { \"news\": boolean, \"count\": integer } /community/getMessages/ # Allow to get new messages to a specific user. Method: POST Request Type: JSON Request example: { \"user\": \"string\", \"acks\": [ \"string ID_MESSAGE_RECEIVED OPTIONAL\" ] } Response Type: JSON Response example: [ { \"id\": integer, \"kind\": \"input | output\", \"ack\": boolean, \"content\": \"string TEXT_MESSAGE\", \"file\": \"string URL\", \"timestamp\": \"datetime\", \"fromUser\": integer, \"toUser\": integer, \"through\": \"string SOCIAL NETWORK\" }, ... ] /community/register/communication/ # Allow to register an interaction between two users through a specific social network. Method: POST Request Type: JSON Request example: { \"fromUser\": \"string\", \"toUser\": \"string\", \"through\": \"string\" } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", }","title":"Community"},{"location":"api/community/#community-api","text":"This API is oriented for older adults apps, in order to allow old people to communicate with his communities without needing to know how to use each one of the social networks. To be able to use any of these endpoints you need first have a valid token provided by the authentication endpoints (either JWT or OAuth2 ) The documentation for this API and his endpoints can be found here .","title":"Community API"},{"location":"api/community/#endpoints","text":"","title":"Endpoints"},{"location":"api/community/#communityconfigure","text":"Allow to configure a Social Network Translator for a specific user. Method: POST Request Type: JSON Request example: { \"user\": \"string\", \"social\": \"string\", \"auth_code\": \"string OPTIONAL\" } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", \"redirectURL\": \"URL_TO_REDIRECT_USER OPTIONAL\" }","title":"/community/configure/"},{"location":"api/community/#communitysendmessage","text":"Method: POST Request Type: JSON Request example: { \"fromUser\": \"string\", \"toUser\": \"string\", \"content\": \"string TEXT_MESSAGE\" \"file\": FILE_MESSAGE } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", }","title":"/community/sendMessage/"},{"location":"api/community/#communitychecknetworks","text":"Allow to check the social network status for a specific user. Method: POST Request Type: JSON Request example: { \"user\": \"string\" } Response Type: JSON Response example: { \"string SOCIAL_ID\": { \"detail\": \"string TEXT_MESSAGE\", \"code\": 200 | 404 }, ... }","title":"/community/check/networks/"},{"location":"api/community/#communitycheckmessages","text":"Allow to check for new messages to a specific user. Method: POST Request Type: JSON Request example: { \"user\": \"string\" } Response Type: JSON Response example: { \"news\": boolean, \"count\": integer }","title":"/community/check/messages/"},{"location":"api/community/#communitygetmessages","text":"Allow to get new messages to a specific user. Method: POST Request Type: JSON Request example: { \"user\": \"string\", \"acks\": [ \"string ID_MESSAGE_RECEIVED OPTIONAL\" ] } Response Type: JSON Response example: [ { \"id\": integer, \"kind\": \"input | output\", \"ack\": boolean, \"content\": \"string TEXT_MESSAGE\", \"file\": \"string URL\", \"timestamp\": \"datetime\", \"fromUser\": integer, \"toUser\": integer, \"through\": \"string SOCIAL NETWORK\" }, ... ]","title":"/community/getMessages/"},{"location":"api/community/#communityregistercommunication","text":"Allow to register an interaction between two users through a specific social network. Method: POST Request Type: JSON Request example: { \"fromUser\": \"string\", \"toUser\": \"string\", \"through\": \"string\" } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", }","title":"/community/register/communication/"},{"location":"api/translator/","text":"Translator API # This API is oriented to be used for other apps, in order to communicate with their clients without needing to know how to use each one of the social networks. To be able to use any of these endpoints you need first have a valid token provided by the authentication endpoints (either JWT or OAuth2 ) The documentation for this API and his endpoints can be found here . Endpoints # /translator/sendMessage/ # Allows to send a message from a specific user, to a specific user, through an specific social network. 'fromUser' and 'toUser' must be the username in the specified social network. Method: POST Request Type: JSON Request example: { \"through\": \"string\", \"fromUser\": \"string\", \"toUser\": \"string\", \"content\": \"string TEXT_MESSAGE\" \"file\": FILE_MESSAGE } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", } /translator/configure/ # Allow to configure a Social Network Translator for a specific user Method: GET Request Type: JSON Request example: { \"username\": \"string\", \"social\": \"string\", \"auth_code\": \"string\" } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", \"redirectURL\": \"URL_TO_REDIRECT_USER OPTIONAL\" } /translator/auth/{social}/ # Receive authentication callback from oauth2 authentication systems. For example, Gmail. Method: GET Request Type: Query Request example: /translator/auth/gmail/?state=1234&code=1234 Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", \"redirectURL\": \"URL_TO_REDIRECT_USER OPTIONAL\" } /translator/push-notif/{social}/ # Receive push notifications from different social networks Method: GET Request Type: JSON Request example: Depends on the source Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", \"redirectURL\": \"URL_TO_REDIRECT_USER OPTIONAL\" }","title":"Translator"},{"location":"api/translator/#translator-api","text":"This API is oriented to be used for other apps, in order to communicate with their clients without needing to know how to use each one of the social networks. To be able to use any of these endpoints you need first have a valid token provided by the authentication endpoints (either JWT or OAuth2 ) The documentation for this API and his endpoints can be found here .","title":"Translator API"},{"location":"api/translator/#endpoints","text":"","title":"Endpoints"},{"location":"api/translator/#translatorsendmessage","text":"Allows to send a message from a specific user, to a specific user, through an specific social network. 'fromUser' and 'toUser' must be the username in the specified social network. Method: POST Request Type: JSON Request example: { \"through\": \"string\", \"fromUser\": \"string\", \"toUser\": \"string\", \"content\": \"string TEXT_MESSAGE\" \"file\": FILE_MESSAGE } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", }","title":"/translator/sendMessage/"},{"location":"api/translator/#translatorconfigure","text":"Allow to configure a Social Network Translator for a specific user Method: GET Request Type: JSON Request example: { \"username\": \"string\", \"social\": \"string\", \"auth_code\": \"string\" } Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", \"redirectURL\": \"URL_TO_REDIRECT_USER OPTIONAL\" }","title":"/translator/configure/"},{"location":"api/translator/#translatorauthsocial","text":"Receive authentication callback from oauth2 authentication systems. For example, Gmail. Method: GET Request Type: Query Request example: /translator/auth/gmail/?state=1234&code=1234 Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", \"redirectURL\": \"URL_TO_REDIRECT_USER OPTIONAL\" }","title":"/translator/auth/{social}/"},{"location":"api/translator/#translatorpush-notifsocial","text":"Receive push notifications from different social networks Method: GET Request Type: JSON Request example: Depends on the source Response Type: JSON Response example: { \"detail\": \"string SOME_MESSAGE\", \"redirectURL\": \"URL_TO_REDIRECT_USER OPTIONAL\" }","title":"/translator/push-notif/{social}/"},{"location":"auth/jwt/","text":"JWT # JSON Web Token (JWT) is a JSON-based open standard for creating access tokens. The system support access through this standard to the different api endpoints described in Community and Translator . To be able to use it you must add the token given by the endpoints in the Authorization header with the format {Authorization: JWT }. To apply the standard the library used was django-rest-framework-simplejwt . Access token have a 5 minutes lifetime. Refresh token have a 1 day lifetime. Endpoints # /auth/jwt/token/ # Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials. Method: POST Request Type: JSON Request example: { \"username\": \"string\", \"password\": \"string\" } Response Type: JSON Response example: { \"refresh\": \"string\", \"access\": \"string\" } /auth/jwt/token/refresh/ # Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid. Method: POST Request Type: JSON Request example: { \"refresh\": \"string\" } Response Type: JSON Response example: { \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmMGZiNmZhYWUxNGQ0Njk5ODFkNjMwYTNkNjM5ZmExMiIsImV4cCI6MTUxNjMxNjc4NSwidG9rZW5fdHlwZSI6ImFjY2VzcyIsInVzZXJfaWQiOjF9.WwMaxb7UthfK_chRynaEQhH5CffxZgQBXtcrgndhxuw\" } /auth/jwt/token/verify/ # Takes a token and indicates if it is valid. This view provides no information about a token's fitness for a particular use. Method: POST Request Type: JSON Request example: { \"token\": \"string\" } Response Type: HTTP_CODE (200 if the token is valid)","title":"JWT"},{"location":"auth/jwt/#jwt","text":"JSON Web Token (JWT) is a JSON-based open standard for creating access tokens. The system support access through this standard to the different api endpoints described in Community and Translator . To be able to use it you must add the token given by the endpoints in the Authorization header with the format {Authorization: JWT }. To apply the standard the library used was django-rest-framework-simplejwt . Access token have a 5 minutes lifetime. Refresh token have a 1 day lifetime.","title":"JWT"},{"location":"auth/jwt/#endpoints","text":"","title":"Endpoints"},{"location":"auth/jwt/#authjwttoken","text":"Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials. Method: POST Request Type: JSON Request example: { \"username\": \"string\", \"password\": \"string\" } Response Type: JSON Response example: { \"refresh\": \"string\", \"access\": \"string\" }","title":"/auth/jwt/token/"},{"location":"auth/jwt/#authjwttokenrefresh","text":"Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid. Method: POST Request Type: JSON Request example: { \"refresh\": \"string\" } Response Type: JSON Response example: { \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmMGZiNmZhYWUxNGQ0Njk5ODFkNjMwYTNkNjM5ZmExMiIsImV4cCI6MTUxNjMxNjc4NSwidG9rZW5fdHlwZSI6ImFjY2VzcyIsInVzZXJfaWQiOjF9.WwMaxb7UthfK_chRynaEQhH5CffxZgQBXtcrgndhxuw\" }","title":"/auth/jwt/token/refresh/"},{"location":"auth/jwt/#authjwttokenverify","text":"Takes a token and indicates if it is valid. This view provides no information about a token's fitness for a particular use. Method: POST Request Type: JSON Request example: { \"token\": \"string\" } Response Type: HTTP_CODE (200 if the token is valid)","title":"/auth/jwt/token/verify/"},{"location":"auth/oauth2/","text":"OAuth2 # Open Authorization (OAuth) is an open standard for access delegation, commonly used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords. The system support access through this standard to the different api endpoints described in Community and Translator . To be able to use it you must add the token given by the endpoints in the Authorization header with the format {Authorization: Bearer }. To apply the standard the library used was django-oauth-toolkit . Access token have a 10 minutes lifetime. Refresh token have a 1 day lifetime. Endpoints # /auth/oauth2/token/ (get Token) # Takes a set of user credentials and client credentials and returns an access and refresh token pair to prove the authentication of those credentials. Method: POST Authorization: Type: Basic Auth Username: Client ID Password: Client Secret Request Type: JSON Request example: { \"grant_type\": \"password\", \"username\": \"string\", \"password\": \"string\" } Response Type: JSON Response example: { \"access_token\": \"string\", \"refresh_token\": \"string\", \"token_type\": \"Bearer\", \"expires_in\": int TIME_IN_MILISECONDS, \"scope\": \"write read\" } /auth/oauth2/token/ (refresh Token) # Takes a set of client credentials and access/refresh token and returns an access and refresh token pair to prove the authentication of those credentials. Method: POST Authorization: Type: Basic Auth Username: Client ID Password: Client Secret Request Type: JSON Request example: { \"grant_type\" : \"refresh_token\", \"refresh_token\" : \"string\" } Response Type: JSON Response example: { \"access_token\": \"string\", \"refresh_token\": \"string\", \"token_type\": \"Bearer\", \"expires_in\": int TIME_IN_MILISECONDS, \"scope\": \"write read\" } /auth/oauth2/revoke_token/ # Takes a set of client credentials and access/refresh token and revoke the given token. Method: POST Request Type: JSON Request example: { \"token\" : \"string\", \"client_id\" : \"string\" \"client_secret\" : \"string\" } Response Type: HTTP_CODE (200 if the token was revoked)","title":"OAuth2"},{"location":"auth/oauth2/#oauth2","text":"Open Authorization (OAuth) is an open standard for access delegation, commonly used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords. The system support access through this standard to the different api endpoints described in Community and Translator . To be able to use it you must add the token given by the endpoints in the Authorization header with the format {Authorization: Bearer }. To apply the standard the library used was django-oauth-toolkit . Access token have a 10 minutes lifetime. Refresh token have a 1 day lifetime.","title":"OAuth2"},{"location":"auth/oauth2/#endpoints","text":"","title":"Endpoints"},{"location":"auth/oauth2/#authoauth2token-get-token","text":"Takes a set of user credentials and client credentials and returns an access and refresh token pair to prove the authentication of those credentials. Method: POST Authorization: Type: Basic Auth Username: Client ID Password: Client Secret Request Type: JSON Request example: { \"grant_type\": \"password\", \"username\": \"string\", \"password\": \"string\" } Response Type: JSON Response example: { \"access_token\": \"string\", \"refresh_token\": \"string\", \"token_type\": \"Bearer\", \"expires_in\": int TIME_IN_MILISECONDS, \"scope\": \"write read\" }","title":"/auth/oauth2/token/ (get Token)"},{"location":"auth/oauth2/#authoauth2token-refresh-token","text":"Takes a set of client credentials and access/refresh token and returns an access and refresh token pair to prove the authentication of those credentials. Method: POST Authorization: Type: Basic Auth Username: Client ID Password: Client Secret Request Type: JSON Request example: { \"grant_type\" : \"refresh_token\", \"refresh_token\" : \"string\" } Response Type: JSON Response example: { \"access_token\": \"string\", \"refresh_token\": \"string\", \"token_type\": \"Bearer\", \"expires_in\": int TIME_IN_MILISECONDS, \"scope\": \"write read\" }","title":"/auth/oauth2/token/ (refresh Token)"},{"location":"auth/oauth2/#authoauth2revoke_token","text":"Takes a set of client credentials and access/refresh token and revoke the given token. Method: POST Request Type: JSON Request example: { \"token\" : \"string\", \"client_id\" : \"string\" \"client_secret\" : \"string\" } Response Type: HTTP_CODE (200 if the token was revoked)","title":"/auth/oauth2/revoke_token/"},{"location":"models/hsn/","text":"HasSocialNetwork # This model represent that a user have an account in a specific social network. It's useful to get the username or alias. class HasSocialNetwork(models.Model): user = integer social = string username = string alias = string user: The User's pk that send the message social: The social network's pk that send the message username: The User's username in the specific Social Network alias: The User's alias in the specific Social Network. Optional","title":"Has Social Network"},{"location":"models/hsn/#hassocialnetwork","text":"This model represent that a user have an account in a specific social network. It's useful to get the username or alias. class HasSocialNetwork(models.Model): user = integer social = string username = string alias = string user: The User's pk that send the message social: The social network's pk that send the message username: The User's username in the specific Social Network alias: The User's alias in the specific Social Network. Optional","title":"HasSocialNetwork"},{"location":"models/message/","text":"Message # This model represent a message in the database. class Message(models.Model): KIND_CHOICES = ( ('input', 'Recibido'), ('output', 'Enviado') ) fromUser = integer toUser = integer through = string kind = string KIND_CHOICES ack = boolean content = string file = string timestamp = datetime fromUser: The User's pk that send the message toUser: The User's pk that will received the message through: The social network's pk that send the message kind: Indicate if the message arrived to the app or was send from the app ack: Indicate if the message was already send or received content: The text message to send file: The file message to send. timestamp: It's the datetime when the message was added to the database. It's automatic.","title":"Message"},{"location":"models/message/#message","text":"This model represent a message in the database. class Message(models.Model): KIND_CHOICES = ( ('input', 'Recibido'), ('output', 'Enviado') ) fromUser = integer toUser = integer through = string kind = string KIND_CHOICES ack = boolean content = string file = string timestamp = datetime fromUser: The User's pk that send the message toUser: The User's pk that will received the message through: The social network's pk that send the message kind: Indicate if the message arrived to the app or was send from the app ack: Indicate if the message was already send or received content: The text message to send file: The file message to send. timestamp: It's the datetime when the message was added to the database. It's automatic.","title":"Message"},{"location":"translators/gmail/","text":"GmailTranslator # Configuration # In the configuration process for this translator (which can be reached using the configure endpoint in Community or Translator ), a \"redirectURL\" field will be received in the response's JSON. This field contains a URL that must be used to redirect the user to Google to authorize the application to read and send messages through Gmail. Internally, Google'll send a push notification to the server to give an access token to Gmail's API.","title":"Gmail"},{"location":"translators/gmail/#gmailtranslator","text":"","title":"GmailTranslator"},{"location":"translators/gmail/#configuration","text":"In the configuration process for this translator (which can be reached using the configure endpoint in Community or Translator ), a \"redirectURL\" field will be received in the response's JSON. This field contains a URL that must be used to redirect the user to Google to authorize the application to read and send messages through Gmail. Internally, Google'll send a push notification to the server to give an access token to Gmail's API.","title":"Configuration"},{"location":"translators/how-to/","text":"How to add a new Translator to the Project # First, you need understand what is a translator. Figuratively, it's a personal assistant who knows how to speak a specific language (in our case, use a social network), have a unique client (user) and helps him to speak (send messages) with his contacts. In other works, each user have one translator for each social network. Understanding this, we need to know the interface that every translator must follow. Interface # Every translator should extends class Translator (It's a abstract class, because python doesn't have interfaces), following the Factory Pattern. The translator class have 3 code to indicate different states and 6 abstract methods to be overridden. The class looks like: class Translator(ABC): MORE_INFO_CODE = 1 # Indicate that the method need more info or optional parameters SUCCESS_CODE = 2 # Indicate that the method finished correctly ERROR_CODE = 4 # Indicate that the method fail in the task @abstractmethod def isConnected(self): pass @abstractmethod def configure(self, data): pass @abstractmethod def sendText(self, message): pass @abstractmethod def sendImage(self, message): pass @abstractmethod def sendVideo(self, message): pass @abstractmethod def sendAudio(self, message): pass They should implement the next methods: isConnected # This method should verify if the user is currently connected to the social network. In order to know if the social network should be configurated or nor. Signature: def isConnected(self): Return: Boolean configure # This method should connect the user to the social network or send a request to the social network to allow the connection. Signature: def isConnected(self, data): Receive: data: Type: Dict Example: { \"username\": \"string USERNAME_IN_SN\", \"auth_code\": \"string OPTIONAL PASS_OR_ACCESS_CODE\" } Indications: The field \"auth_code\" could be not given in the first call. Return: Type: Dict Example: { \"detail\": \"string RESPONSE_TEXT\", \"code\": integer TRANSLATOR_CODE, \"redirectURL\": \"string OPTIONAL URL_TO_REDIRECT_USER\" } Indications: The field \"code\" is one of the Translator's code show before. The field \"redirectURL\" exist for oauth2 authentications to redirect user to the properly authentication service. sendText, sendImage, sendVideo and sendAudio # This methods have the same structure and should send a message of each kind. Signature: def sendKIND(self, message): Receive: message: Type: Message Return: Type: Dict Example: { \"detail\": \"string RESPONSE_TEXT\", \"code\": integer TRANSLATOR_CODE } Enable new Translator # To be able to use the new translator, it should be added to the socialNetworks file (translator/fixtures/socialNetworks.json) or directly to the database. After that, the translator factory (/translator/translators/TranslatorFactory.py) should include the new translator in the build method, using the same id added in the database. Utils # Translator have a common utils file with useful functions. Get social network's username from Message # This function return the username of the sender and receiver given a Message object. The username corresponds to that of the social network specified in the Message object given. Signature: def getUsernameFromMessage(msg): Receive: msg: Type: Message Return: Type: Tuple Example: ( \"string FROM_USER_USERNAME\" | None, \"string TO_USER_USERNAME\" | None ) Get social network's alias from Message # This function return the alias of the sender and receiver given a Message object. The alias corresponds to that of the social network specified in the Message object given. Signature: def getAliasFromMessage(msg): Receive: msg: Type: Message Return: Type: Tuple Example: ( \"string FROM_USER_ALIAS\" | None, \"string TO_USER_ALIAS\" | None ) Save incoming message # This function save a message receive through the translator into the database. Signature: def saveIncomingMessage(msg): Receive: msg: Type: dict Example: { \"fromUser\": User, \"toUser\": User, \"through\": \"string SOCIAL_ID\", \"datetime\": datetime, \"content\": \"string MESSAGE_CONTENT\", \"file\": File } Indications: User refers to the Django User Model. File refers to the Django File and the property name should be replaced with the temporary file location Return: Type: Message Save outcoming message # This function save a message send through the translator into the database. This function is identical to Save incoming message except for the name. Signature: def saveOutcomingMessage(msg):","title":"Add new"},{"location":"translators/how-to/#how-to-add-a-new-translator-to-the-project","text":"First, you need understand what is a translator. Figuratively, it's a personal assistant who knows how to speak a specific language (in our case, use a social network), have a unique client (user) and helps him to speak (send messages) with his contacts. In other works, each user have one translator for each social network. Understanding this, we need to know the interface that every translator must follow.","title":"How to add a new Translator to the Project"},{"location":"translators/how-to/#interface","text":"Every translator should extends class Translator (It's a abstract class, because python doesn't have interfaces), following the Factory Pattern. The translator class have 3 code to indicate different states and 6 abstract methods to be overridden. The class looks like: class Translator(ABC): MORE_INFO_CODE = 1 # Indicate that the method need more info or optional parameters SUCCESS_CODE = 2 # Indicate that the method finished correctly ERROR_CODE = 4 # Indicate that the method fail in the task @abstractmethod def isConnected(self): pass @abstractmethod def configure(self, data): pass @abstractmethod def sendText(self, message): pass @abstractmethod def sendImage(self, message): pass @abstractmethod def sendVideo(self, message): pass @abstractmethod def sendAudio(self, message): pass They should implement the next methods:","title":"Interface"},{"location":"translators/how-to/#isconnected","text":"This method should verify if the user is currently connected to the social network. In order to know if the social network should be configurated or nor. Signature: def isConnected(self): Return: Boolean","title":"isConnected"},{"location":"translators/how-to/#configure","text":"This method should connect the user to the social network or send a request to the social network to allow the connection. Signature: def isConnected(self, data): Receive: data: Type: Dict Example: { \"username\": \"string USERNAME_IN_SN\", \"auth_code\": \"string OPTIONAL PASS_OR_ACCESS_CODE\" } Indications: The field \"auth_code\" could be not given in the first call. Return: Type: Dict Example: { \"detail\": \"string RESPONSE_TEXT\", \"code\": integer TRANSLATOR_CODE, \"redirectURL\": \"string OPTIONAL URL_TO_REDIRECT_USER\" } Indications: The field \"code\" is one of the Translator's code show before. The field \"redirectURL\" exist for oauth2 authentications to redirect user to the properly authentication service.","title":"configure"},{"location":"translators/how-to/#sendtext-sendimage-sendvideo-and-sendaudio","text":"This methods have the same structure and should send a message of each kind. Signature: def sendKIND(self, message): Receive: message: Type: Message Return: Type: Dict Example: { \"detail\": \"string RESPONSE_TEXT\", \"code\": integer TRANSLATOR_CODE }","title":"sendText, sendImage, sendVideo and sendAudio"},{"location":"translators/how-to/#enable-new-translator","text":"To be able to use the new translator, it should be added to the socialNetworks file (translator/fixtures/socialNetworks.json) or directly to the database. After that, the translator factory (/translator/translators/TranslatorFactory.py) should include the new translator in the build method, using the same id added in the database.","title":"Enable new Translator"},{"location":"translators/how-to/#utils","text":"Translator have a common utils file with useful functions.","title":"Utils"},{"location":"translators/how-to/#get-social-networks-username-from-message","text":"This function return the username of the sender and receiver given a Message object. The username corresponds to that of the social network specified in the Message object given. Signature: def getUsernameFromMessage(msg): Receive: msg: Type: Message Return: Type: Tuple Example: ( \"string FROM_USER_USERNAME\" | None, \"string TO_USER_USERNAME\" | None )","title":"Get social network's username from Message"},{"location":"translators/how-to/#get-social-networks-alias-from-message","text":"This function return the alias of the sender and receiver given a Message object. The alias corresponds to that of the social network specified in the Message object given. Signature: def getAliasFromMessage(msg): Receive: msg: Type: Message Return: Type: Tuple Example: ( \"string FROM_USER_ALIAS\" | None, \"string TO_USER_ALIAS\" | None )","title":"Get social network's alias from Message"},{"location":"translators/how-to/#save-incoming-message","text":"This function save a message receive through the translator into the database. Signature: def saveIncomingMessage(msg): Receive: msg: Type: dict Example: { \"fromUser\": User, \"toUser\": User, \"through\": \"string SOCIAL_ID\", \"datetime\": datetime, \"content\": \"string MESSAGE_CONTENT\", \"file\": File } Indications: User refers to the Django User Model. File refers to the Django File and the property name should be replaced with the temporary file location Return: Type: Message","title":"Save incoming message"},{"location":"translators/how-to/#save-outcoming-message","text":"This function save a message send through the translator into the database. This function is identical to Save incoming message except for the name. Signature: def saveOutcomingMessage(msg):","title":"Save outcoming message"},{"location":"translators/skype/","text":"SkypeTranslator # Configuration # In the configuration process for this translator (which can be reached using the configure endpoint in Community or Translator ), the \"auth_code\" field in the request must contain the password used to login in skype. The access token given by this process'll be valid for 24 hours. After this time, the configuration process must be done again (with the user password).","title":"Skype"},{"location":"translators/skype/#skypetranslator","text":"","title":"SkypeTranslator"},{"location":"translators/skype/#configuration","text":"In the configuration process for this translator (which can be reached using the configure endpoint in Community or Translator ), the \"auth_code\" field in the request must contain the password used to login in skype. The access token given by this process'll be valid for 24 hours. After this time, the configuration process must be done again (with the user password).","title":"Configuration"},{"location":"translators/telegram/","text":"TelegramTranslator # Configuration # In the configuration process for this translator (which can be reached using the configure endpoint in Community or Translator ), the first request mustn't have the field \"auth_code\". After completing this first request, telegram'll send a authorization code to the user's telegram app. This code must be used in the field \"auth_code\" in a second request to the configuration endpoint. Telegram'll provide an access token for that user, which has an indeterminate duration.","title":"Telegram"},{"location":"translators/telegram/#telegramtranslator","text":"","title":"TelegramTranslator"},{"location":"translators/telegram/#configuration","text":"In the configuration process for this translator (which can be reached using the configure endpoint in Community or Translator ), the first request mustn't have the field \"auth_code\". After completing this first request, telegram'll send a authorization code to the user's telegram app. This code must be used in the field \"auth_code\" in a second request to the configuration endpoint. Telegram'll provide an access token for that user, which has an indeterminate duration.","title":"Configuration"},{"location":"translators/whatsapp/","text":"WhatsappTranslator # Configuration # In the configuration process for this translator (which can be reached using the configure endpoint in Community or Translator ), a \"redirectURL\" field will be received in the response's JSON. This field contains a URL where a QR image for whatsapp web login will be found. This QR image must be scan using the user's Whatsapp application. After scanning it, you can try to configure the social network again and a successful message must be returned.","title":"Whatsapp"},{"location":"translators/whatsapp/#whatsapptranslator","text":"","title":"WhatsappTranslator"},{"location":"translators/whatsapp/#configuration","text":"In the configuration process for this translator (which can be reached using the configure endpoint in Community or Translator ), a \"redirectURL\" field will be received in the response's JSON. This field contains a URL where a QR image for whatsapp web login will be found. This QR image must be scan using the user's Whatsapp application. After scanning it, you can try to configure the social network again and a successful message must be returned.","title":"Configuration"}]}